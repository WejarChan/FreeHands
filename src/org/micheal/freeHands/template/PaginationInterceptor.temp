import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Properties;

import org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode;
import org.apache.ibatis.executor.ErrorContext;
import org.apache.ibatis.executor.ExecutorException;
import org.apache.ibatis.executor.parameter.ParameterHandler;
import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.logging.Log;
import org.apache.ibatis.logging.LogFactory;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.mapping.ParameterMode;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.apache.ibatis.plugin.Signature;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.reflection.property.PropertyTokenizer;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.TypeHandler;
import org.apache.ibatis.type.TypeHandlerRegistry;

@Intercepts({@Signature(type=StatementHandler.class,method="prepare",args={Connection.class})})
public class PaginationInterceptor implements Interceptor{

	private Log log = LogFactory.getLog(this.getClass());
	
	private Dialect dialect;
	
	@Override
	public Object intercept(Invocation invocation) throws Throwable {
		
		StatementHandler statementHandler = (StatementHandler)invocation.getTarget();
		ParameterHandler parameterHandler = statementHandler.getParameterHandler();
		MetaObject metaStatementHandler = MetaObject.forObject(statementHandler);
		//查询sql
		BoundSql boundSql = statementHandler.getBoundSql();
		//查询参数
		Object parameterObject = parameterHandler.getParameterObject();
		//分页参数
		RowBounds rowBounds = (RowBounds)metaStatementHandler.getValue("delegate.rowBounds");
		MappedStatement mappedStatement = (MappedStatement) metaStatementHandler.getValue("delegate.mappedStatement");
		//通过threadLocal 传进来的参数
		PaginationInfo pageInfo = (PaginationInfo) PaginationContext.remove();
		//不需要分页
		if((rowBounds == null || rowBounds == RowBounds.DEFAULT) && pageInfo == null){
			
			return invocation.proceed();
			
		}
		//分页参数是从RowBounds传来的。转换成paginationInfo
		if(pageInfo == null){
			pageInfo = new PaginationInfo();
			pageInfo.setCurrentPage((rowBounds.getOffset())/rowBounds.getLimit());
			pageInfo.setPageSize(rowBounds.getLimit());
			metaStatementHandler.setValue("delegate.rowBounds.offset", RowBounds.NO_ROW_OFFSET );
			metaStatementHandler.setValue("delegate.rowBounds.limit", RowBounds.NO_ROW_LIMIT );
		}
		
		//获取配置文件
		Configuration configuration = (Configuration)metaStatementHandler.getValue("delegate.configuration");
		//数据库方言类型
		Dialect.DatabaseType databaseType  =null;
		
		try{
			databaseType = Dialect.DatabaseType.valueOf(configuration.getVariables().getProperty("dialect").toLowerCase());
		} catch(Exception e){
			//ignore
		}
		
		if(databaseType ==null){
			throw new RuntimeException("the value of the dialect property in configuration.xml is not defined : "+ configuration.getVariables().getProperty("dialect"));
		}
	       
		dialect = new Dialect(databaseType);
	       
		String totalRowNumSql = dialect.getTotalRowNumSql(boundSql.getSql());
		Connection conn = configuration.getEnvironment().getDataSource().getConnection()  ;            
        PreparedStatement prepStmt = conn.prepareStatement(totalRowNumSql);    
        
        BoundSql totalRowBoundSql = new BoundSql(configuration,totalRowNumSql,boundSql.getParameterMappings(),parameterObject);    
        
        setParameters(prepStmt,mappedStatement,totalRowBoundSql,parameterObject);    
        
        ResultSet rs = prepStmt.executeQuery();    
        if (rs.next()) {    
            int totalRowNum = rs.getInt(1);  
            pageInfo.setTotalRowNum(totalRowNum);
            pageInfo.setTotalPageNum(totalRowNum/pageInfo.getPageSize());
        }    
        rs.close();    
        prepStmt.close();    
        conn.close();  
		
		String sql = boundSql.getSql();
		
        String pagesql = dialect.getPaginationSql(sql, pageInfo);  
        metaStatementHandler.setValue("delegate.boundSql.sql", pagesql);
        
		if(log.isDebugEnabled()){
			log.debug("生成分页SQL : "+ boundSql.getSql());
		}

		return invocation.proceed();
	}

	/**  
     * 对SQL参数(?)设值,参考org.apache.ibatis.executor.parameter.DefaultParameterHandler  
     * @param ps  
     * @param mappedStatement  
     * @param boundSql  
     * @param parameterObject  
     * @throws SQLException  
     */    
    private void setParameters(PreparedStatement ps,MappedStatement mappedStatement,BoundSql boundSql,Object parameterObject) throws SQLException {    
        ErrorContext.instance().activity("setting parameters").object(mappedStatement.getParameterMap().getId());    
        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();    
        if (parameterMappings != null) {    
            Configuration configuration = mappedStatement.getConfiguration();    
            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();    
            MetaObject metaObject = parameterObject == null ? null: configuration.newMetaObject(parameterObject);    
            for (int i = 0; i < parameterMappings.size(); i++) {    
                ParameterMapping parameterMapping = parameterMappings.get(i);    
                if (parameterMapping.getMode() != ParameterMode.OUT) {    
                    Object value;    
                    String propertyName = parameterMapping.getProperty();    
                    PropertyTokenizer prop = new PropertyTokenizer(propertyName);    
                    if (parameterObject == null) {    
                        value = null;    
                    } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {    
                        value = parameterObject;    
                    } else if (boundSql.hasAdditionalParameter(propertyName)) {    
                        value = boundSql.getAdditionalParameter(propertyName);    
                    } else if (propertyName.startsWith(ForEachSqlNode.ITEM_PREFIX)&& boundSql.hasAdditionalParameter(prop.getName())) {    
                        value = boundSql.getAdditionalParameter(prop.getName());    
                        if (value != null) {    
                            value = configuration.newMetaObject(value).getValue(propertyName.substring(prop.getName().length()));    
                        }    
                    } else {    
                        value = metaObject == null ? null : metaObject.getValue(propertyName);    
                    }    
                    TypeHandler typeHandler = parameterMapping.getTypeHandler();    
                    if (typeHandler == null) {    
                        throw new ExecutorException("There was no TypeHandler found for parameter "+ propertyName + " of statement "+ mappedStatement.getId());    
                    }    
                    typeHandler.setParameter(ps, i + 1, value, parameterMapping.getJdbcType());    
                }    
            }    
        }    
    }
	
	@Override
	public Object plugin(Object target) {
		return Plugin.wrap(target, this);
	}

	@Override
	public void setProperties(Properties properties) {
		
	}

}
